// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220817155510-0ae748fd2007
// source: scanner/api/v1/orchestrator_scan_service.proto

package scannerV1

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *GetKubeVulnerabilitiesRequest) CloneVT() *GetKubeVulnerabilitiesRequest {
	if m == nil {
		return (*GetKubeVulnerabilitiesRequest)(nil)
	}
	r := &GetKubeVulnerabilitiesRequest{
		KubernetesVersion: m.KubernetesVersion,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetKubeVulnerabilitiesRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *GetKubeVulnerabilitiesResponse) CloneVT() *GetKubeVulnerabilitiesResponse {
	if m == nil {
		return (*GetKubeVulnerabilitiesResponse)(nil)
	}
	r := &GetKubeVulnerabilitiesResponse{
		ScannerVersion: m.ScannerVersion,
	}
	if rhs := m.AggregatorVulnerabilities; rhs != nil {
		tmpContainer := make([]*Vulnerability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.AggregatorVulnerabilities = tmpContainer
	}
	if rhs := m.ApiserverVulnerabilities; rhs != nil {
		tmpContainer := make([]*Vulnerability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ApiserverVulnerabilities = tmpContainer
	}
	if rhs := m.ControllerManagerVulnerabilities; rhs != nil {
		tmpContainer := make([]*Vulnerability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ControllerManagerVulnerabilities = tmpContainer
	}
	if rhs := m.SchedulerVulnerabilities; rhs != nil {
		tmpContainer := make([]*Vulnerability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.SchedulerVulnerabilities = tmpContainer
	}
	if rhs := m.GenericVulnerabilities; rhs != nil {
		tmpContainer := make([]*Vulnerability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.GenericVulnerabilities = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetKubeVulnerabilitiesResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *GetOpenShiftVulnerabilitiesRequest) CloneVT() *GetOpenShiftVulnerabilitiesRequest {
	if m == nil {
		return (*GetOpenShiftVulnerabilitiesRequest)(nil)
	}
	r := &GetOpenShiftVulnerabilitiesRequest{
		OpenShiftVersion: m.OpenShiftVersion,
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetOpenShiftVulnerabilitiesRequest) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (m *GetOpenShiftVulnerabilitiesResponse) CloneVT() *GetOpenShiftVulnerabilitiesResponse {
	if m == nil {
		return (*GetOpenShiftVulnerabilitiesResponse)(nil)
	}
	r := &GetOpenShiftVulnerabilitiesResponse{
		ScannerVersion: m.ScannerVersion,
	}
	if rhs := m.Vulnerabilities; rhs != nil {
		tmpContainer := make([]*Vulnerability, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Vulnerabilities = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *GetOpenShiftVulnerabilitiesResponse) CloneGenericVT() proto.Message {
	return m.CloneVT()
}

func (this *GetKubeVulnerabilitiesRequest) EqualVT(that *GetKubeVulnerabilitiesRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.KubernetesVersion != that.KubernetesVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetKubeVulnerabilitiesResponse) EqualVT(that *GetKubeVulnerabilitiesResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.AggregatorVulnerabilities) != len(that.AggregatorVulnerabilities) {
		return false
	}
	for i, vx := range this.AggregatorVulnerabilities {
		vy := that.AggregatorVulnerabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Vulnerability{}
			}
			if q == nil {
				q = &Vulnerability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ApiserverVulnerabilities) != len(that.ApiserverVulnerabilities) {
		return false
	}
	for i, vx := range this.ApiserverVulnerabilities {
		vy := that.ApiserverVulnerabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Vulnerability{}
			}
			if q == nil {
				q = &Vulnerability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.ControllerManagerVulnerabilities) != len(that.ControllerManagerVulnerabilities) {
		return false
	}
	for i, vx := range this.ControllerManagerVulnerabilities {
		vy := that.ControllerManagerVulnerabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Vulnerability{}
			}
			if q == nil {
				q = &Vulnerability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.SchedulerVulnerabilities) != len(that.SchedulerVulnerabilities) {
		return false
	}
	for i, vx := range this.SchedulerVulnerabilities {
		vy := that.SchedulerVulnerabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Vulnerability{}
			}
			if q == nil {
				q = &Vulnerability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.GenericVulnerabilities) != len(that.GenericVulnerabilities) {
		return false
	}
	for i, vx := range this.GenericVulnerabilities {
		vy := that.GenericVulnerabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Vulnerability{}
			}
			if q == nil {
				q = &Vulnerability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ScannerVersion != that.ScannerVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetOpenShiftVulnerabilitiesRequest) EqualVT(that *GetOpenShiftVulnerabilitiesRequest) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if this.OpenShiftVersion != that.OpenShiftVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *GetOpenShiftVulnerabilitiesResponse) EqualVT(that *GetOpenShiftVulnerabilitiesResponse) bool {
	if this == nil {
		return that == nil
	} else if that == nil {
		return false
	}
	if len(this.Vulnerabilities) != len(that.Vulnerabilities) {
		return false
	}
	for i, vx := range this.Vulnerabilities {
		vy := that.Vulnerabilities[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Vulnerability{}
			}
			if q == nil {
				q = &Vulnerability{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.ScannerVersion != that.ScannerVersion {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchestratorScanServiceClient is the client API for OrchestratorScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorScanServiceClient interface {
	GetKubeVulnerabilities(ctx context.Context, in *GetKubeVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetKubeVulnerabilitiesResponse, error)
	GetOpenShiftVulnerabilities(ctx context.Context, in *GetOpenShiftVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetOpenShiftVulnerabilitiesResponse, error)
}

type orchestratorScanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorScanServiceClient(cc grpc.ClientConnInterface) OrchestratorScanServiceClient {
	return &orchestratorScanServiceClient{cc}
}

func (c *orchestratorScanServiceClient) GetKubeVulnerabilities(ctx context.Context, in *GetKubeVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetKubeVulnerabilitiesResponse, error) {
	out := new(GetKubeVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.OrchestratorScanService/GetKubeVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorScanServiceClient) GetOpenShiftVulnerabilities(ctx context.Context, in *GetOpenShiftVulnerabilitiesRequest, opts ...grpc.CallOption) (*GetOpenShiftVulnerabilitiesResponse, error) {
	out := new(GetOpenShiftVulnerabilitiesResponse)
	err := c.cc.Invoke(ctx, "/scannerV1.OrchestratorScanService/GetOpenShiftVulnerabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorScanServiceServer is the server API for OrchestratorScanService service.
// All implementations must embed UnimplementedOrchestratorScanServiceServer
// for forward compatibility
type OrchestratorScanServiceServer interface {
	GetKubeVulnerabilities(context.Context, *GetKubeVulnerabilitiesRequest) (*GetKubeVulnerabilitiesResponse, error)
	GetOpenShiftVulnerabilities(context.Context, *GetOpenShiftVulnerabilitiesRequest) (*GetOpenShiftVulnerabilitiesResponse, error)
	mustEmbedUnimplementedOrchestratorScanServiceServer()
}

// UnimplementedOrchestratorScanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorScanServiceServer struct {
}

func (UnimplementedOrchestratorScanServiceServer) GetKubeVulnerabilities(context.Context, *GetKubeVulnerabilitiesRequest) (*GetKubeVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeVulnerabilities not implemented")
}
func (UnimplementedOrchestratorScanServiceServer) GetOpenShiftVulnerabilities(context.Context, *GetOpenShiftVulnerabilitiesRequest) (*GetOpenShiftVulnerabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenShiftVulnerabilities not implemented")
}
func (UnimplementedOrchestratorScanServiceServer) mustEmbedUnimplementedOrchestratorScanServiceServer() {
}

// UnsafeOrchestratorScanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorScanServiceServer will
// result in compilation errors.
type UnsafeOrchestratorScanServiceServer interface {
	mustEmbedUnimplementedOrchestratorScanServiceServer()
}

func RegisterOrchestratorScanServiceServer(s grpc.ServiceRegistrar, srv OrchestratorScanServiceServer) {
	s.RegisterService(&OrchestratorScanService_ServiceDesc, srv)
}

func _OrchestratorScanService_GetKubeVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubeVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorScanServiceServer).GetKubeVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.OrchestratorScanService/GetKubeVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorScanServiceServer).GetKubeVulnerabilities(ctx, req.(*GetKubeVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestratorScanService_GetOpenShiftVulnerabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenShiftVulnerabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorScanServiceServer).GetOpenShiftVulnerabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scannerV1.OrchestratorScanService/GetOpenShiftVulnerabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorScanServiceServer).GetOpenShiftVulnerabilities(ctx, req.(*GetOpenShiftVulnerabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestratorScanService_ServiceDesc is the grpc.ServiceDesc for OrchestratorScanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestratorScanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scannerV1.OrchestratorScanService",
	HandlerType: (*OrchestratorScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKubeVulnerabilities",
			Handler:    _OrchestratorScanService_GetKubeVulnerabilities_Handler,
		},
		{
			MethodName: "GetOpenShiftVulnerabilities",
			Handler:    _OrchestratorScanService_GetOpenShiftVulnerabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner/api/v1/orchestrator_scan_service.proto",
}

func (m *GetKubeVulnerabilitiesRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKubeVulnerabilitiesRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetKubeVulnerabilitiesRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.KubernetesVersion) > 0 {
		i -= len(m.KubernetesVersion)
		copy(dAtA[i:], m.KubernetesVersion)
		i = encodeVarint(dAtA, i, uint64(len(m.KubernetesVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetKubeVulnerabilitiesResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKubeVulnerabilitiesResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetKubeVulnerabilitiesResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ScannerVersion) > 0 {
		i -= len(m.ScannerVersion)
		copy(dAtA[i:], m.ScannerVersion)
		i = encodeVarint(dAtA, i, uint64(len(m.ScannerVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GenericVulnerabilities) > 0 {
		for iNdEx := len(m.GenericVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.GenericVulnerabilities[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SchedulerVulnerabilities) > 0 {
		for iNdEx := len(m.SchedulerVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.SchedulerVulnerabilities[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ControllerManagerVulnerabilities) > 0 {
		for iNdEx := len(m.ControllerManagerVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.ControllerManagerVulnerabilities[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ApiserverVulnerabilities) > 0 {
		for iNdEx := len(m.ApiserverVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.ApiserverVulnerabilities[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AggregatorVulnerabilities) > 0 {
		for iNdEx := len(m.AggregatorVulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.AggregatorVulnerabilities[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOpenShiftVulnerabilitiesRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenShiftVulnerabilitiesRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetOpenShiftVulnerabilitiesRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.OpenShiftVersion) > 0 {
		i -= len(m.OpenShiftVersion)
		copy(dAtA[i:], m.OpenShiftVersion)
		i = encodeVarint(dAtA, i, uint64(len(m.OpenShiftVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOpenShiftVulnerabilitiesResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenShiftVulnerabilitiesResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *GetOpenShiftVulnerabilitiesResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ScannerVersion) > 0 {
		i -= len(m.ScannerVersion)
		copy(dAtA[i:], m.ScannerVersion)
		i = encodeVarint(dAtA, i, uint64(len(m.ScannerVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vulnerabilities) > 0 {
		for iNdEx := len(m.Vulnerabilities) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Vulnerabilities[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetKubeVulnerabilitiesRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KubernetesVersion)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetKubeVulnerabilitiesResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AggregatorVulnerabilities) > 0 {
		for _, e := range m.AggregatorVulnerabilities {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.ApiserverVulnerabilities) > 0 {
		for _, e := range m.ApiserverVulnerabilities {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.ControllerManagerVulnerabilities) > 0 {
		for _, e := range m.ControllerManagerVulnerabilities {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.SchedulerVulnerabilities) > 0 {
		for _, e := range m.SchedulerVulnerabilities {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	if len(m.GenericVulnerabilities) > 0 {
		for _, e := range m.GenericVulnerabilities {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	l = len(m.ScannerVersion)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetOpenShiftVulnerabilitiesRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OpenShiftVersion)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetOpenShiftVulnerabilitiesResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vulnerabilities) > 0 {
		for _, e := range m.Vulnerabilities {
			l = e.SizeVT()
			n += 1 + l + sov(uint64(l))
		}
	}
	l = len(m.ScannerVersion)
	if l > 0 {
		n += 1 + l + sov(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *GetKubeVulnerabilitiesRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKubeVulnerabilitiesResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKubeVulnerabilitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorVulnerabilities = append(m.AggregatorVulnerabilities, &Vulnerability{})
			if err := m.AggregatorVulnerabilities[len(m.AggregatorVulnerabilities)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiserverVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiserverVulnerabilities = append(m.ApiserverVulnerabilities, &Vulnerability{})
			if err := m.ApiserverVulnerabilities[len(m.ApiserverVulnerabilities)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerManagerVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerManagerVulnerabilities = append(m.ControllerManagerVulnerabilities, &Vulnerability{})
			if err := m.ControllerManagerVulnerabilities[len(m.ControllerManagerVulnerabilities)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchedulerVulnerabilities = append(m.SchedulerVulnerabilities, &Vulnerability{})
			if err := m.SchedulerVulnerabilities[len(m.SchedulerVulnerabilities)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericVulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericVulnerabilities = append(m.GenericVulnerabilities, &Vulnerability{})
			if err := m.GenericVulnerabilities[len(m.GenericVulnerabilities)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScannerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenShiftVulnerabilitiesRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenShiftVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenShiftVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenShiftVulnerabilitiesResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenShiftVulnerabilitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vulnerabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vulnerabilities = append(m.Vulnerabilities, &Vulnerability{})
			if err := m.Vulnerabilities[len(m.Vulnerabilities)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannerVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScannerVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
